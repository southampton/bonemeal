#!/usr/bin/python

CONFIG_FILE = '/etc/bonemeal.conf'

## DO NOT EDIT BELOW THIS LINE #################################################

import urwid      # the text-mode UI toolkit bonemeal uses
import platform   # for get hostname and configure
import os         # for get network interfaces
import os.path    # for install section
import socket     # for get ip from hostname
import subprocess # for sysexec
import requests   # for auth/register
import logging    # for logging during installation
import time       # for pausing at startup to avoid nasty boot messages
import ConfigParser # for config
import traceback   # for exception handling
import sys
import termios
import dmidecode
import re
import pipes      # for pipes.quote (replace with shlex in Python 3)
from multiprocessing import Process, Manager

class Bonemeal:
	version       = '2017-09-01-01'

	# [bonemeal]
	config = {
		'title'            : 'University of Southampton RHEL7 Desktop Setup',
		'log_file'         : '/var/log/bonemeal.log',
		'puppet_binary'    : '/opt/puppetlabs/bin/puppet',
		'server_url'       : 'https://zero.yourdomain.tld/',
		'server_verify'    : False,
		'ssh_puppet_user'  : 'changeme',
		'ssh_puppet_server': 'changeme',
		'ssh_backup_user'  : 'changeme',
		'ssh_backup_server': 'changeme',
		'reskit_pkgdir'    : '/etc/reskit/packages',
		'reskit_server'    : 'reskit.yourdomain.tld',
		'reskit_share'     : 'reskit',
		'csw_server'       : 'csw.yourdomain.tld',
		'base_dir'         : '/etc/soton',
		'manifests'        : 'site',
	}

	## colour setup
	palette = [
		('edit', 'black', 'light gray'),
		('header', 'white', 'dark red', 'bold'),
		('label', 'white', 'dark blue', 'bold'),
		('bg', 'white', 'dark blue'),
		('error', 'yellow', 'dark blue')
		]

	## state handling for unhandled input
	start   = True
	finish  = False

	## worker process status constants
	STATUS_NOT_STARTED = 0
	STATUS_IN_PROGRESS = 1
	STATUS_FINISHED    = 2

################################################################################

	def __init__(self):
		print "[bonemeal] Launching installer..."

		# load configuration from file
		configParser = ConfigParser.RawConfigParser()

		try:
			configParser.readfp(open(CONFIG_FILE))

			# try to load config options if they exist - overwriting defaults
			for key in self.config.keys():
				if configParser.has_option('bonemeal',key):
					self.config[key] = configParser.get('bonemeal',key)

			# load booleans in as a boolean if it is 'no', 'yes', 'True' or 'False'
			try:
				self.config['server_verify'] = configParser.getboolean('bonemeal','server_verify')
			except ValueError as ex:
				pass
			except ConfigParser.NoOptionError as ex:
				pass

			# Remove trailing slash on basedir
			if self.config['base_dir'].endswith("/"):
				self.config['base_dir'] = self.config['base_dir'][:-1]

			# Ensure trailing slash on the server register URL
			if not self.config['server_url'].endswith("/"):
				self.config['server_url'] = self.config['server_url'] + "/"

			# Split the manifests on comma to produce a list
			self.config['manifests_order'] = self.config['manifests'].split(',')

			# Build a dictionary mapping manifest ID to manifest name
			self.config['manifests_dict'] = {}
			self.config['ad_ou_dict'] = {}
			for key in self.config['manifests_order']:
				if configParser.has_option('bonemeal', 'manifest_' + key):
					self.config['manifests_dict'][key] = configParser.get('bonemeal', 'manifest_' + key)
				else:
					self.config['manifests_dict'][key] = key

				# Handle AD joining
				if configParser.has_option('bonemeal', 'ad_ou_' + key):
					self.config['ad_ou_dict'][key] = configParser.get('bonemeal', 'ad_ou_' + key)
				else:
					self.config['ad_ou_dict'][key] = None

		except Exception as ex:
			print "[bonemeal] Could not read from config file " + CONFIG_FILE + ": " + str(ex)
			print "[bonemeal] Starting with default options"
		
		print repr(self.config)

		# logging
		self.log    = logging.getLogger("bonemeal")
		fileHandler = logging.FileHandler(self.config['log_file'])
		fileHandler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s: %(message)s'))
		self.log.addHandler(fileHandler)
		self.log.setLevel(logging.INFO)

		## log the startup
		self.log.info("bonemeal installer (version " + self.version + ") starting")

		## detect the OS
		if not self.supported_os():
			raise Exception("Operating system not supported")

		## Set a nice header/footer on all views
		self.setup_header_footer()

		# make tab work like down arrow...sort of.
		urwid.command_map['tab'] = 'cursor down'

		## Create the main loop
		self.loop = urwid.MainLoop(self.view_interactive(), self.palette, unhandled_input=self.unhandled_input, handle_mouse=False)

		## Run the event loop
		self.loop.run()

################################################################################

	def switch_view(self,view):
		self.loop.widget = view
		self.loop.draw_screen()

################################################################################

	def setup_header_footer(self):
		self.header_text = urwid.Text(" " + self.config['title'])
		self.header      = urwid.AttrWrap(self.header_text, 'header')
		self.footer_text = urwid.Text("bonemeal installer " + self.version)
		self.footer      = urwid.AttrWrap(self.footer_text, 'header')

################################################################################

	def unhandled_input(self,key):

		if key == 'Q':
			## always quit on Shift+Q
			self.handle_exit()

		elif self.finish:
			## any input on the finish screen should quit the installer
			self.exit_installer()

		elif self.start:
			## start screen - jump to the first input
			self.start = False
			self.view_sethostname()

################################################################################

	def sysexec(self,command,shell=False):
		self.log.info("executing command: " + str(command))

		try:
			proc = subprocess.Popen(command,stdout=subprocess.PIPE, stderr=subprocess.STDOUT,shell=shell)
			(stdoutdata, stderrdata) = proc.communicate()
			return (proc.returncode,str(stdoutdata))
		except Exception as ex:
			self.log.error("command generated an exception: " + type(ex).__name__ + ": " + str(ex))
			return (1,str(ex))

################################################################################

	def handle_exit(self,button=None):
		raise urwid.ExitMainLoop()

################################################################################

	def start_monitor_loop(self):
		self.forward = True
		self.current_pos = 2
		self.on_loop_callback()

	def on_loop_callback(self,loop=None,ud=None):

		if self.shared['status'] == self.STATUS_IN_PROGRESS:
			self.worker_text.set_text(self.shared['display'])
		elif self.shared['status'] == self.STATUS_FINISHED:
			if self.shared['error']:
				self.log.info("worker process generated an error")
				self.view_fatal_error(self.shared['display'])
				return
			else:
				self.log.info("worker process finished without error")
				self.view_finish()
				return

		if self.current_pos == -1:
			return

		if self.current_pos == 10:
			self.forward = False
		elif self.current_pos == 1:
			self.forward = True

		if self.forward:
			self.current_pos = self.current_pos + 1
		else:
			self.current_pos = self.current_pos - 1

		txt = ""
		for pos in range(1,11):
			if pos == self.current_pos:
				txt = txt + "-"
			else:
				txt = txt + " "


		self.worker_spinner.set_text(txt)
		self.loop.draw_screen()
		self.loop.set_alarm_in(0.1,self.on_loop_callback)

	def on_loop_refresh(self,loop=None,ud=None):
		self.loop.draw_screen()
		self.loop.set_alarm_in(0.3,self.on_loop_refresh)

################################################################################
## INTERACTIVE MODE

	def view_interactive(self):
		div   = urwid.Divider()
		bt    = urwid.BigText('I am ready to build', font=urwid.font.HalfBlock5x4Font())
		btwp  = urwid.Padding(bt, "center", 'clip')
		txt   = urwid.Text(u"Press any key to set up this computer",align='center')

		pile1 = urwid.Pile([btwp,div,txt])
		pile1 = urwid.Filler(pile1, 'middle', None, 7)
		frame = urwid.Frame(header=self.header, body=pile1, footer=self.footer)

		return urwid.AttrMap(frame, 'bg')

################################################################################
## SET HOSTNAME

	def view_sethostname(self):

		## Try to get the UOS name
		try:		
			self.asset_tag = dmidecode.chassis().values()[0]['data']['Asset Tag']
		except Exception as ex:
			self.asset_tag = None

		## Only set the UOS name if it matches UOS-number or ISS-number
		## or an ECS-lab style number
		if not re.match(r"^(((uos|iss|lnx|UOS|ISS|LNX)\-[0-9]{2,8})|([A-Za-z][0-9]{2,8}))$",self.asset_tag):
			self.asset_tag = None

		## If there is no asset tag, try falling back to the 
		## DHCP-acquired hostname
		if self.asset_tag is None:
			try:
				# node() *might* return an FQDN, so return only the first component
				self.asset_tag = platform.node().split('.')[0]
			except Exception as ex:
				self.asset_tag = None

			# Validate the DHCP hostname (includes ECS additions)
			if not re.match(r"^(((uos|iss|lnx|UOS|ISS|LNX)\-[0-9]{2,8})|([A-Za-z][0-9]{2,8}))$",self.asset_tag):
				self.asset_tag = None

		div = urwid.Divider()
		htxt = urwid.Text(u"Please enter the name of the computer. You can use the arrow keys to move between fields.",align='left')

		self.hostname_edit = urwid.Edit( caption=('label'," Name:  "))
		ed = urwid.AttrMap(self.hostname_edit, 'edit')

		if self.asset_tag:
			pos = len(self.asset_tag)
			self.hostname_edit.set_edit_text(self.asset_tag)
			self.hostname_edit.set_edit_pos(pos)

		button = urwid.Button("Continue")
		urwid.connect_signal(button, 'click', self.handle_hostname)
		button = urwid.Padding(button,"center", width=12)

		self.hostname_error = urwid.Text(u"",align='left')
		err = urwid.AttrMap(self.hostname_error, 'error')

		pile = urwid.Pile([div,htxt,div,ed,div,button,div,err])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

################################################################################

	def handle_hostname(self,button):
		self.hostname = self.hostname_edit.get_edit_text().lower()

		if self.hostname.endswith(".soton.ac.uk"):
			self.log.info("stripping .soton.ac.uk from given hostname")
			self.hostname = self.hostname = self.hostname[:-len(".soton.ac.uk")]

		if "." in self.hostname:
			self.hostname_error.set_text("That hostname is invalid. Please try again.")
			return

		if not re.match(r"^(((uos|iss|lnx|UOS|ISS|LNX)\-[0-9]{2,8})|([A-Za-z][0-9]{2,8}))$",self.hostname):
			self.hostname_error.set_text("That name is invalid. It must be of the form UOS-<number>")
			return

		self.log.info("chosen hostname: " + self.hostname)

		# Strip off the domain
		self.fqdn = self.hostname + ".soton.ac.uk"

		self.log.info("chosen fqdn: " + self.fqdn)

		self.footer_text.set_text(self.fqdn)
		self.view_setmanifest()

################################################################################

	def view_setmanifest(self):
		div = urwid.Divider()
		htxt = urwid.Text(u"Please choose which variant of the build to deploy to the computer. You can use the arrow keys to move between items in the list. Press Enter to select.", align='left')

		# Set up a list body that contains buttons that choose a manifest
		manifest_list_body = []
		for key in self.config['manifests_order']:
			button = urwid.Button(self.config['manifests_dict'][key])
			urwid.connect_signal(button, 'click', self.handle_manifest, key)
			manifest_list_body.append(urwid.AttrMap(button, None, focus_map='reversed'))

		# Set up the listbox to contain the list body
		manifest_list = urwid.ListBox(urwid.SimpleFocusListWalker(manifest_list_body))
		manifest_list = urwid.BoxAdapter(manifest_list, 5)
		manifest_list = urwid.Padding(manifest_list, "center", left=2, right=3)

		pile = urwid.Pile([div,htxt,div,manifest_list])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

################################################################################

	def handle_manifest(self, button, key):
		# Store which manifest was selected as we need it later and move
		# on to the auth view
		self.puppet_manifest = key
		self.view_auth()

################################################################################

	def view_auth(self):

		div = urwid.Divider()

		mtxt = urwid.Text(u"Please enter your University username and password in order to register this system.",align='left')

		self.username = urwid.Edit(caption=('label'," Username:  "),allow_tab=False)
		edituser = urwid.AttrMap(self.username, 'edit')
		self.password = urwid.Edit(caption=('label'," Password:  "),mask="*")
		editpass = urwid.AttrMap(self.password, 'edit')

		button1 = urwid.Button("Continue")
		urwid.connect_signal(button1, 'click', self.handle_auth)
		button1 = urwid.Padding(button1,"center", width=12)

		self.auth_error = urwid.Text(u"",align='left')
		err = urwid.AttrMap(self.auth_error, 'error')

		pile = urwid.Pile([div,mtxt,div,edituser,div,editpass,div,button1,div,err])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')

		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

################################################################################

	def handle_auth(self,button):
		self.auth_error.set_text("Contacting server, please wait...")
		self.loop.draw_screen()

		## python requests call with SSL...
		try:
			payload = {'ident': self.ident, 'hostname': self.hostname, 'username': self.username.get_edit_text(), 'password': self.password.get_edit_text()}
			r = requests.post(self.config['server_url'] + "api/v1/register", data=payload, verify = self.config['server_verify'])
		except Exception as ex:
			self.log.error("error contacting registration server: " + type(ex).__name__ + ": " + str(ex))
			self.auth_error.set_text("Error contacting registration server: " + type(ex).__name__ + ": " + str(ex))
			return

		if r.status_code == 200:
			try:
				self.json = r.json()

				if 'error' in self.json:
					self.log.error("registration server returned an error: " + self.json['reason'])
					self.auth_error.set_text(self.json['reason'])
					return
				else:
					self.log.info("registration successful")

			except Exception as ex:
				self.log.error("failed to parse response from registration server: " + type(ex).__name__ + ": " + str(ex))
				self.auth_error.set_text("Failed to understand return response: " + type(ex).__name__ + ": " + str(ex))
				return

			## Start the installation
			self.view_go()

		else:
			self.log.error("unexpected return code from registration server: " + str(r.status_code))
			self.auth_error.set_text("Registration failed: The server returned a HTTP Error " + str(r.status_code))

################################################################################
## DO INSTALL

	def view_go(self):
		div   = urwid.Divider()
		self.worker_spinner = urwid.BigText('', font=urwid.font.HalfBlock7x7Font())
		spinner_padded = urwid.Padding(self.worker_spinner, "center", 'clip')
		self.worker_text = urwid.Text(u"Please wait...",align='center')

		pile1 = urwid.Pile([spinner_padded,div,self.worker_text])
		pile1 = urwid.Filler(pile1, 'middle', None, 7)
		frame = urwid.Frame(header=self.header, body=pile1, footer=self.footer)

#		div = urwid.Divider()

#		self.msgs = urwid.SimpleFocusListWalker([urwid.Text(" ",align='left'),urwid.Text(" Please wait whilst I set up the computer:",align='left')])
#		self.msgs_box = urwid.ListBox(self.msgs)

#		frame = urwid.Frame(header=self.header, body=self.msgs_box, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

		## set up manager to share state between the worker process
		## and the main process (the process we're in)
		self.manager           = Manager()
		self.shared            = self.manager.dict()
		self.shared['status']  = self.STATUS_NOT_STARTED
		self.shared['display'] = "Starting installation..."
		self.shared['error']   = False

		## start the worker process to do the install
		self.worker = Process(target=self.worker_func, args=(self.shared,))
		self.worker.start()

		## start the checking/drawing loop 
		self.start_monitor_loop()

################################################################################

	def worker_fatal(self,errstr):
		self.log.critical("fatal error: " + errstr)
		self.shared['error']   = True
		self.shared['display'] = errstr
		self.shared['status']  = self.STATUS_FINISHED

################################################################################

	def worker_func(self, shared):
		shared['status'] = self.STATUS_IN_PROGRESS

		## 1. HOSTNAME #########################################################
		shared['display'] = "Setting hostname"
		(code, output) = self.sysexec(["/bin/hostnamectl","set-hostname",self.hostname])

		if code != 0:
			return self.worker_fatal("Setting hostname failed: \n" + output)
		else:
			self.log.info("Hostname set to '" + self.hostname + "'")

		## 2. SAVE SSH KEY PAIR ################################################
		shared['display'] = "Saving drone configuration"
		# Create the directory
		if os.path.exists(self.config['base_dir']):
			if not os.path.isdir(self.config['base_dir']):
				return self.worker_fatal("The path " + self.config['base_dir'] + " exists but it is not a directory")
		else:
			try:
				os.mkdir(self.config['base_dir'])
			except Exception as ex: 
				return self.worker_fatal("Failed to create directory " + self.config['base_dir'] + ": \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Created " + self.config['base_dir'])

		# Save the SSH public key
		try:
			with open(self.config['base_dir'] + '/ssh_public_key', 'w') as f:
				f.write(self.json['public_key'])
				f.write("\n")

		except Exception as ex:
			return self.worker_fatal("Failed to write to " + self.config['base_dir'] + "/ssh_public_key: \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Saved the SSH public key")

		# Save the SSH private key
		try:
			with open(self.config['base_dir'] + '/ssh_private_key', 'w') as f:
				f.write(self.json['private_key'])

		except Exception as ex:
			return self.worker_fatal("Failed to write to " + self.config['base_dir'] + "/ssh_private_key: \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Saved the SSH private key")

		# Set perms on the key
		try:
			os.chmod(self.config['base_dir'] + '/ssh_private_key', 0600)

		except Exception as ex:
			return self.worker_fatal("Failed to change permissions on " + self.config['base_dir'] + "/ssh_private_key: \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Set permissions on the private key")

		# Save the backup key (for rsyncd)
		try:
			with open(self.config['base_dir'] + '/backup_key', 'w') as f:
				f.write("backup:" + self.json['backup_key'] + "\n")

		except Exception as ex:
			return self.worker_fatal("Failed to write to " + self.config['base_dir'] + "/backup_key: \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Saved the backup key")

		# Set perms on the key
		try:
			os.chmod(self.config['base_dir'] + '/backup_key', 0600)

		except Exception as ex:
			return self.worker_fatal("Failed to change permissions on " + self.config['base_dir'] + "/backup_key: \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Set permissions on the backup key")

		try:
			drone_config = ConfigParser.RawConfigParser()
			drone_config.add_section('backup')
			drone_config.add_section('puppet')
			drone_config.add_section('server')
			drone_config.add_section('reskit')
			drone_config.add_section('csw')

			drone_config.set('backup', 'port',     str(self.json['backup_port']))
			drone_config.set('backup', 'server',   self.config['ssh_backup_server'])
			drone_config.set('backup', 'user',     self.config['ssh_backup_user'])

			drone_config.set('puppet', 'user',     self.config['ssh_puppet_user'])
			drone_config.set('puppet', 'server',   self.config['ssh_puppet_server'])
			drone_config.set('puppet', 'binary',   self.config['puppet_binary'])
			drone_config.set('puppet', 'manifest', self.puppet_manifest)

			drone_config.set('server', 'address',  self.config['server_url'])
			drone_config.set('server', 'verify',   self.config['server_verify'])
			drone_config.set('server', 'api_key',  str(self.json['api_key']))

			drone_config.set('reskit', 'pkgdir',   self.config['reskit_pkgdir'])
			drone_config.set('reskit', 'server',   self.config['reskit_server'])
			drone_config.set('reskit', 'share',    self.config['reskit_share'])

			drone_config.set('csw',    'server',   self.config['csw_server'])

			with open(self.config['base_dir'] + '/drone.conf', 'w') as f:
				drone_config.write(f)
	
		except Exception as ex:
			return self.worker_fatal("Failed to write to " + self.config['base_dir'] + "/drone.conf: \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Saved drone configuration")

		# Set perms on the drone config
		try:
			os.chmod(self.config['base_dir'] + '/drone.conf', 0600)

		except Exception as ex:
			return self.worker_fatal("Failed to change permissions on " + self.config['base_dir'] + "/drone.conf: \n" + str(type(ex)) + " - " + str(ex))

		# Create the directory for Puppet modules
		if os.path.exists(self.config['base_dir'] + "/puppet"):
			if not os.path.isdir(self.config['base_dir'] + "/puppet"):
				return self.worker_fatal("The path " + self.config['base_dir'] + "/puppet exists but it is not a directory")
		else:
			try:
				os.mkdir(self.config['base_dir'] + "/puppet")
			except Exception as ex: 
				return self.worker_fatal("Failed to create directory " + self.config['base_dir'] + "/puppet: \n" + str(type(ex)) + " - " + str(ex))

		self.log.info("Created " + self.config['base_dir'] + "/puppet")

		## Now we download the puppet modules over rsync+ssh
		shared['display'] = "Downloading system policy"
		self.log.info("Downloading Puppet modules into " + self.config['base_dir'] + "/puppet")

		(code, output) = self.sysexec("""/usr/bin/rsync -e "ssh -i %s/ssh_private_key -o PreferredAuthentications=publickey -oStrictHostKeyChecking=no" -av --delete %s@%s: %s/puppet/""" % (self.config['base_dir'], self.config['ssh_puppet_user'],self.config['ssh_puppet_server'],self.config['base_dir'],),shell=True)

		if code != 0:
			return self.worker_fatal("Could not download system policy: \n" + output)

		shared['display'] = "Applying system policy"
		self.log.info("Applying Puppet rules")

		## We run this three times because: Puppet
		## We only care about the output of the final command

		(code, output) = self.sysexec("""%s apply --detailed-exitcodes --modulepath %s/puppet/modules/ %s/puppet/manifests/%s.pp""" % (self.config['puppet_binary'],self.config['base_dir'],self.config['base_dir'],self.puppet_manifest),shell=True)
		(code, output) = self.sysexec("""%s apply --detailed-exitcodes --modulepath %s/puppet/modules/ %s/puppet/manifests/%s.pp""" % (self.config['puppet_binary'],self.config['base_dir'],self.config['base_dir'],self.puppet_manifest),shell=True)
		(code, output) = self.sysexec("""%s apply --detailed-exitcodes --modulepath %s/puppet/modules/ %s/puppet/manifests/%s.pp""" % (self.config['puppet_binary'],self.config['base_dir'],self.config['base_dir'],self.puppet_manifest),shell=True)

		## 1: failed
		## 2: success, some resources changed
		## 4: success, but some resources failed (so, fail)
		## 6: success, but some resources changed and others failed (so, fail)
		if code == 1 or code == 4 or code == 6:
			return self.worker_fatal("An error occured whilst applying system policy: \n" + output)

		## we set the theme here, rather than via puppet, because we need to
		## rebuild the initrd/initramfs. also we have to set it /before/
		## software updates, otherwise dracut helpfully updates initramfs for
		## the current kernel only, and not any installed which are newer which
		## we haven't booted into yet. 
		shared['display'] = "Updating boot screen"
		self.log.info("Setting plymouth theme to text")
		(code, output) = self.sysexec("/sbin/plymouth-set-default-theme -R text",shell=True)

		if code != 0:
			return self.worker_fatal("An error occured changing the plymouth theme: \n" + output)

		shared['display'] = "Installing software updates"
		self.log.info("Installing software updates")
		(code, output) = self.sysexec("/usr/bin/yum -y update",shell=True)

		if code != 0:
			return self.worker_fatal("An error occured whilst installing software updates: \n" + output)

		## Attempt to detect if we're on a nvidia graphics card system, and if so,
		## we should set the boot options "plymouth.ignore-udev" so that 
		## plymouth doesn't ask udev for graphics cards and instead just uses 
		## a text output because even though NVIDIA exposes a drm driver it does
		## not work and so we force plymouth to ignore it
		##
		## the puppet stage /should/ have installed the nvidia-detect
		## package, so we'll use that to detect if we're on nvidia, and if we are
		## we will add the flag to /etc/default/grub. All these sections 
		## fail gracefully (e.g. if anything goes wrong it isnt classed as a
		## fatal error)
		if os.path.exists("/usr/bin/nvidia-detect"):

			shared['display'] = "Checking for a NVIDIA graphics card"
			self.log.info("Checking for a NVIDIA graphics card")
			(code, output) = self.sysexec(["/usr/bin/nvidia-detect"])

			# nvidia-detect outputs these codes if a nvidia card was found
			if code in [1,2,3,4,5]:
				self.log.info("Setting plymouth options for NVIDIA")

				try:
					with open("/etc/default/grub","r+") as grubfp:
						grub = grubfp.read()

						## Change the boot options
						if "plymouth.ignore-udev" not in grub:
							shared['display'] = "Rebuilding the boot loader configuration"
							grub = grub.replace('GRUB_CMDLINE_LINUX="','GRUB_CMDLINE_LINUX="plymouth.ignore-udev ')
							grubfp.seek(0)
							grubfp.write(grub)

						self.log.info("Rebuilding the GRUB config file")
						(code, output) = self.sysexec(["/usr/sbin/grub2-mkconfig","-o","/boot/grub2/grub.cfg"])
						if code != 0:
							self.log.info("An error occured whilst rebuilding the grub config file")

				except Exception as ex:
					self.log.info("Failed to set plymouth boot options: " + str(type(ex)) + " - " + str(ex))

		## For manifests where we need to join the domain, we now need
		## to do this. This relies on samba-common-tools being installed,
		## which is done by Puppet, so we must do this after Puppet.
		if self.config['ad_ou_dict'][self.puppet_manifest] is not None:
			shared['display'] = "Joining system to domain"
			self.log.info("Joining system to domain")

			# Get the username and password the user entered
			auth_user = self.username.get_edit_text()
			auth_password = self.password.get_edit_text()

			# Attempt to join the domain
			(code, output) = self.sysexec("echo " + pipes.quote(auth_password) + " | /usr/bin/net ads join --no-dns-updates createcomputer=" + pipes.quote(self.config['ad_ou_dict'][self.puppet_manifest]) + " osName=\"Red Hat Enterprise Linux Workstation\" osVer=7 -U" + pipes.quote(auth_user), shell=True)

			if code != 0:
				return self.worker_fatal("An error occurred whilst joining the domain:\n" + output)

		## Finally we use drone (which we deployed earlier via puppet)
		## to send to the LDI server updated metadata + facts
		## if it fails, we don't care that much. It gets updated on
		## cron anyway
		shared['display'] = "Sending system information to the LDI server"
		self.log.info("Running drone ldi metadata")
		self.sysexec("/sbin/drone ldi metadata",shell=True)
		self.log.info("Running drone ldi facts")
		self.sysexec("/sbin/drone ldi facts",shell=True)

		shared['status']  = self.STATUS_FINISHED

################################################################################
## FINISH SCREEN

	def view_finish(self):
		self.finish = True

		## clear standard input so if the user pressed buttons during the install script, clear them away
		#termios.tcflush(sys.stdin,termios.TCIOFLUSH)

		div = urwid.Divider()
		donetext = urwid.BigText('all done!', font=urwid.font.HalfBlock5x4Font())
		donetext_padded = urwid.Padding(donetext, "center", 'clip')

		dtxt = urwid.Text(u"Press any key to restart",align='center')
		pile1 = urwid.Pile([donetext_padded,div,dtxt])
		pile1 = urwid.Filler(pile1, 'middle', None, 7)
		frame = urwid.Frame(header=self.header, body=pile1, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

		## refresh the screen every so often to prevent systemd from ballsing 
		## up the output like it pretty much always does by logging to the 
		## console
		self.on_loop_refresh()

################################################################################

	def exit_installer(self):
		## Mark bonemeal as not starting at reboot
		try:
			os.unlink('/.bonemeal')
		except Exception as ex:
			pass

		## reboot
		self.sysexec("/sbin/reboot")

		## exit (We probably never get this far)
		raise urwid.ExitMainLoop()

################################################################################
## FATAL ERROR SCREEN

	def view_fatal_error(self,message):
		## clear standard input so if the user pressed buttons during the install script, clear them away
		#termios.tcflush(sys.stdin,termios.TCIOFLUSH)

		div = urwid.Divider()

		bt = urwid.BigText('fatal error', font=urwid.font.HalfBlock5x4Font())
		btwp = urwid.Padding(bt, "center", 'clip')
		htxt = urwid.Text(u"A fatal error occured:",align='left')
		mtxt = urwid.Text(message,align='left')

		button = urwid.Button("Exit installer")
		urwid.connect_signal(button, 'click', self.handle_exit)
		button = urwid.Padding(button,"center", width=18)

		pile = urwid.Pile([div,btwp,div,htxt,div,mtxt,div,button])
		pile = urwid.Padding(pile, "left", left=1,right=1)
		fill = urwid.Filler(pile, 'top')
		frame = urwid.Frame(header=self.header, body=fill, footer=self.footer)
		self.switch_view(urwid.AttrMap(frame, 'bg'))

		## refresh the screen every so often to prevent systemd from ballsing 
		## up the output like it pretty much always does by logging to the 
		## console
		self.on_loop_refresh()

################################################################################
## Detect OS version

	def supported_os(self):

		## work out OS version
		(distname, distversion, distid) = platform.linux_distribution()

		if distid == 'Maipo':
			self.release = 7
			self.ident   = 'rhel7'
			self.log.info("Detected operating system as RHEL7: " + distname + " " + distversion + " " + distid)
			return True
		else:
			self.log.error("Detected operating system as: " + distname + " " + distversion + " " + distid)
			return False

################################################################################

if '__main__' == __name__:
	## plymouth should not be running or this installer won't work very well
	subprocess.call(["/usr/bin/plymouth","quit"])

	try:
		Bonemeal()
		subprocess.call(["reset"])
	except Exception as ex:
		print "--------------------------------------------------------------------------------"
		print "A critical error occured in bonemeal! Details will be shown below for 5 minutes: \n"
		traceback.print_exc()
		print "--------------------------------------------------------------------------------"
		time.sleep(300)
